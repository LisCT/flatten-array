{"version":3,"sources":["logo.svg","components/Header.js","components/Input.js","components/Button.js","components/Result.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","logo","className","alt","Input","handleChange","value","name","type","onChange","clas","copy","handleSubmit","disabled","onClick","Result","solution","explain","href","target","rel","Footer","convertToArray","array","JSON","parse","convertToFlatArray","flat","Infinity","App","INITIAL_STATE","input","result","error","useState","values","setValues","event","Button","preventDefault","e","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f165a0e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cb6a0a0e.svg\";","import React from 'react';\nimport logo from '../logo.svg';\n\nconst Header = () => (\n    <header>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Flat your Arrays</h1>\n        <p> This app will flatten an array of arbitrarily nested arrays of integers into a flat array of integers. e.g.</p>\n        <pre><code>[[1,2,[3]],4] = [1,2,3,4]</code></pre>\n    </header>\n)\n\nexport default Header;\n","import React from 'react';\n\nconst Input = ({ handleChange, value, name }) => (\n    <div className=\"form__content\">\n        <input \n            type=\"text\"\n            onChange={handleChange}\n            value={value}\n            name={name}\n        />\n    </div>\n)\n\nexport default Input;\n","import React from 'react';\n\nconst Input = ({ clas, copy = \"click me\", handleSubmit, disabled }) => (\n    <div className=\"form__content\">\n    <button\n        className={`btn ${clas}`}\n        onClick={handleSubmit}\n        type=\"submit\"\n        disabled={disabled === ''}\n    >\n    {copy}\n    </button>\n    </div>\n)\n\nexport default Input;\n","import React from 'react';\n    \nconst Result =({value, solution, explain}) => {\n    return(\n        <div className=\"container\">\n            <h2>Solution</h2>\n\n            <div className=\"result\">\n                <pre><code> {value} </code></pre>\n            </div>\n\n            <div className=\"container__solution\">\n                <pre><code className=\"code\">{ solution }</code></pre>\n                <div className=\"container__explain\">\n                    <p><strong>Flat</strong> method creates a new array of flat elements. This method accepts a specific depth value,  by default 1.</p>\n                    <p><strong>For the depth level</strong> the value is <strong>Infinity,</strong> specifying that all nested arrays should be flattened.</p>\n                </div>\n            </div>\n            \n            <p className=\"path-line\">See this code in the following path: src/App.js > <a href=\"https://github.com/LisCT/flatten-array/blob/master/src/App.js\" target=\"_blank\" rel=\"noopener noreferrer\">line 13</a></p>\n\n        </div>\n    )\n}\n\nexport default Result;","import React from 'react';\n\nconst Footer = () => (\n    <footer>\n        <p>2019 Â© <a href=\"https://lisbelcruz.com\" target=\"_blank\" rel=\"noopener noreferrer\">Lisbel Cruz</a></p>\n    </footer>\n);\n\nexport default Footer;","import  React, {useState} from 'react';\nimport Header from './components/Header';\nimport Input from './components/Input';\nimport Button from './components/Button';\nimport Result from './components/Result';\nimport Footer from './components/Footer';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport './App.css';\n\nexport const convertToArray = (array) => {\n  return JSON.parse(array);\n}\n\nexport const convertToFlatArray = (value) => {\n  return value.flat(Infinity); \n}\n\n\nfunction App() {\n\n  const INITIAL_STATE = { \n      input : '', \n      result: '',\n      error: '' \n  };\n\n  const [values, setValues] = useState(INITIAL_STATE);\n  \n  const hanldleReset = () => { setValues({ ...INITIAL_STATE }) };\n\n  const handleChange= (event) => {\n    setValues({...values, [event.target.name]: event.target.value })\n  }\n\n  const hadleSubmit = (event) => {\n    event.preventDefault(); \n    const value = values.input;\n\n    if(value !== ''){\n      try{\n        const array = convertToArray(value); \n        const result = convertToFlatArray(array);\n        setValues({ ...values, result, error: '' });\n      }catch(e){\n        setValues({ ...values, error: \"Invalid value, please enter an array.\" });\n      }\n    }\n  }\n\n  const solution = `\n    export const convertToFlatArray = (value) => {\n      return value.flat(Infinity)\n    }\n  `;\n\n  return (\n    <div className=\"main\">\n        <Header/>\n        <Input \n          handleChange={ handleChange }\n          value={ values.input }\n          clas=\"btn__primary\"\n          name=\"input\"\n        />\n        <Button\n          copy=\"Generate\"\n          clas=\"btn__primary\"\n          handleSubmit ={ hadleSubmit } \n          disabled={values.input}\n        />\n        <Button\n        copy=\"Reset\"\n        clas=\"btn__secondary\"\n        handleSubmit ={ hanldleReset } \n        disabled={values.input}\n      />\n\n      {/* Error */}\n      {values.error && <p>{values.error}</p>}\n\n      {/* display result on Generate */}\n      {values.result && values.input && !values.error && <Result value={`[${values.result.join(',')}]`} solution={solution}/> } \n      \n      <Footer/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// eslint-disable-next-line\nimport normalize from 'normalize.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}